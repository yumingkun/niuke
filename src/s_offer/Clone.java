package s_offer;import java.util.HashMap;/** * Created by mingkunyu on 2019-11-20 * 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。 * （注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空） */public class Clone {    public class RandomListNode {        int val;        RandomListNode next = null;        RandomListNode random = null;        RandomListNode(int val) {            this.val = val;        }    }    public RandomListNode Clone(RandomListNode pHead){        HashMap<RandomListNode, RandomListNode> map = new HashMap<>();        RandomListNode p = pHead;        while (p != null) {            RandomListNode newListNode = new RandomListNode(p.val);            //以当前的原节点为key，新节点为value            map.put(p, newListNode);            p = p.next;        }        p = pHead;        while (p != null) {            //获取以当前的原节点为key的新节点            RandomListNode q = map.get(p);            //新节点的next            q.next = map.get(p.next);            //新节点的random            q.random = map.get(p.random);            p = p.next;        }        return map.remove(pHead);//返回删除key 对应的value值    }}