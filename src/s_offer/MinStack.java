package s_offer;import java.util.Stack;/** * Created by mingkunyu on 2019-11-15 * 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。 * <p> * <p> * <p> * stack: 3 5 1 6 * <p> * stack: 3 5 3 1 1 6 * min  : 3 3 1 1 */public class MinStack {    Stack<Integer> stack = new Stack<>();    int min = Integer.MAX_VALUE;    public void push(int node) {        if (stack.isEmpty()) {//初始，栈空            stack.push(node);            min = node;        } else {            if (node <= min) {                stack.push(min);//(保存冗余的最小值)在push更小的值时需要保留在此值之前的最小值                min = node;            }            stack.push(node);        }    }    public void pop() {        //增加最后一个元素以及栈为空时候的检测        if (stack.size() == 0) return;        if (min == stack.peek()) {            if (stack.size() > 1) {                stack.pop();                min = stack.peek();            } else {                min = Integer.MAX_VALUE;            }        }        stack.pop();    }    public int top() {        return stack.peek();    }    public int min() {        return min;    }}